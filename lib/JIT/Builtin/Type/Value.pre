<?php

/*
 * This file is part of PHP-Compiler, a PHP CFG Compiler for PHP code
 *
 * @copyright 2015 Anthony Ferrara. All rights reserved
 * @license MIT See LICENSE at the root of the project for more info
 */

namespace PHPCompiler\JIT\Builtin\Type;

use PHPCompiler\JIT\Builtin\Type;
use PHPCompiler\JIT\Builtin\Refcount;
use PHPCompiler\JIT\Variable;

use PHPLLVM;

class Value extends Type {

    public function register(): void {
        declare {
            struct __value__ {
                __ref__ $ref;
                int8 $type;
                // NOTE: 8 bytes because that covers all needed types
                int8[8] $value;
            };
            static inline function __value__alloc(): __value__*;
            static inline function __value__valueDelref(__value__*): void;
            static inline function __value__toNumeric(__value__*): __value__*;

            static inline function __value__readLong(__value__*): int64;
            static inline function __value__writeLong(__value__*, int64): void;

            static inline function __value__readDouble(__value__*): double;
            static inline function __value__writeDouble(__value__*, double): void;

            static inline function __value__readString(__value__*): __string__*;
            static inline function __value__writeString(__value__*, __string__*): void;
        }
    }

    public function implement(): void {
        $this->implementValueAlloc();
        $this->implementValueToNumeric();
        $this->implementValueReadLong();
        $this->implementValueWriteLong();
        $this->implementValueReadDouble();
        $this->implementValueWriteDouble();
        $this->implementValueDelref();
    }

    public function initialize(): void {
    }

    protected function implementValueAlloc(): void {
        compile {
            function __value__alloc() {
                $var = malloc __value__;
                $ref = (__ref__virtual*) $var;
                $typeinfo = (int32) Refcount::TYPE_INFO_TYPE_VALUE | Refcount::TYPE_INFO_REFCOUNTED;
                __ref__init($typeinfo, $ref);
                return $var;
            }
        }
    }

    protected function implementValueDelref(): void {
        compile {
            function __value__valueDelref($value) {
                $oldType = $value->type;
                $mask = (int8) Variable::IS_REFCOUNTED;
                $isCounted = $oldType & $mask;
                if ($isCounted) {
                    $ptr = &$value->value;
                    $virtual = (__ref__virtual*) $ptr;
                    __ref__delref($virtual);
                }
                return;
            }
        }
    }

    protected function implementValueToNumeric(): void {
        compile {
            function __value__toNumeric($value) {
                $type = $value->type;
                switch $type {
                    case Variable::TYPE_NATIVE_LONG {
                        $var = (__ref__virtual*) $value;
                        __ref__addref($var);
                        return $value;
                    }
                    case Variable::TYPE_NATIVE_DOUBLE {
                        $var = (__ref__virtual*) $value;
                        __ref__addref($var);
                        return $value;
                    }
                    case Variable::TYPE_VALUE {
                        $var = &$value->value;
                        $ptr = (__value__*) $var;
                        $result = __value__toNumeric($ptr);
                        return $result;
                    }
                }
                $var = __value__alloc();
                $tmp = (int64) 0;
                __value__writeLong($var, $tmp);
                return $var;
            }
        }
    }

    protected function implementValueReadLong(): void {
        compile {
            function __value__readLong($value) {
                $type = $value->type;
                switch $type {
                    case Variable::TYPE_NATIVE_LONG {
                        $ptr = &$value->value;
                        $resultPtr = (int64*) $ptr;
                        $offset = (int32) 0;
                        $result = $resultPtr[$offset];
                        return $result;
                    }
                    case Variable::TYPE_NATIVE_DOUBLE {
                        $ptr = &$value->value;
                        $resultPtr = (double*) $ptr;
                        $offset = (int32) 0;
                        $result = $resultPtr[$offset];
                        $return = (int64) $result;
                        return $return;
                    }
                    case Variable::TYPE_VALUE {
                        $var = &$value->value;
                        $ptr = (__value__*) $var;
                        $result = __value__readLong($ptr);
                        return $result;
                    }
                }
                $result = (int64) 0;
                return $result;
            }
        }
    }

    public function implementValueWriteLong(): void {
        compile {
            function __value__writeLong($value, $long) {
                __value__valueDelref($value);
                $type = (int8) Variable::TYPE_NATIVE_LONG;
                $value->type = $type;
                $ptr = &$value->value;
                $resultPtr = (int64*) $ptr;
                $offset = (int32) 0;
                $resultPtr[$offset] = $long;
                return;
            }
        }
    }

    protected function implementValueReadDouble(): void {
        compile {
            function __value__readDouble($value) {
                $type = $value->type;
                switch $type {
                    case Variable::TYPE_NATIVE_LONG {
                        $ptr = &$value->value;
                        $resultPtr = (int64*) $ptr;
                        $offset = (int32) 0;
                        $result = $resultPtr[$offset];
                        $return = (double) $result;
                        return $return;
                    }
                    case Variable::TYPE_NATIVE_DOUBLE {
                        $ptr = &$value->value;
                        $resultPtr = (double*) $ptr;
                        $offset = (int32) 0;
                        $result = $resultPtr[$offset];
                        return $result;
                    }
                    case Variable::TYPE_VALUE {
                        $var = &$value->value;
                        $ptr = (__value__*) $var;
                        $result = __value__readDouble($ptr);
                        return $result;
                    }
                }
                $result = (double) 0.0;
                return $result;
            }
        }
    }

    public function implementValueWriteDouble(): void {
        compile {
            function __value__writeDouble($value, $double) {
                __value__valueDelref($value);
                $type = (int8) Variable::TYPE_NATIVE_DOUBLE;
                $value->type = $type;
                $ptr = &$value->value;
                $resultPtr = (double*) $ptr;
                $offset = (int32) 0;
                $resultPtr[$offset] = $double;
                return;
            }
        }
    }

    protected function implementValueReadString(): void {
        compile {
            function __value__readString($value) {
                $type = $value->type;
                switch $type {
                    case Variable::TYPE_STRING {
                        $ptr = &$value->value;
                        $resultPtr = (__string__*) $ptr;
                        return $resultPtr;
                    }
                    case Variable::TYPE_VALUE {
                        $var = &$value->value;
                        $ptr = (__value__*) $var;
                        $result = __value__readString($ptr);
                        return $result;
                    }
                    // Todo: handle other types
                }
                $result = (__string__*) null;
                return $result;
            }
        }
    }

    public function implementValueWriteString(): void {
        compile {
            function __value__writeString($value, $string) {
                __value__valueDelref($value);
                $type = (int8) Variable::TYPE_STRING;
                $value->type = $type;
                $value->value = $string;
                return;
            }
        }
    }

}
